{"version":3,"sources":["components/Feedback/Feedback.module.css","components/Feedback/Statistics.js","components/Feedback/FeedbackOptions.js","components/Feedback/Section.js","components/Feedback/Notification.js","components/Feedback/Feedback.js","components/App.js","index.js"],"names":["module","exports","Statistic","good","neutral","bad","total","positivePercentage","isOpen","className","styles","boild","FeedbackOptions","onLeaveFeedback","btnValue","type","name","button","onClick","Section","props","title","children","Notification","msg","message","Feedback","state","countTotalFeedback","isOpendDetermine","countPositiveFeedbackPercentage","Math","round","e","target","setState","prevState","step","this","bind","validatorIsOpen","Object","keys","map","item","key","shortid","generate","Statistics","Component","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,IAAM,sBAAsB,WAAa,6BAA6B,cAAgB,gCAAgC,UAAY,4BAA4B,OAAS,yBAAyB,MAAQ,0B,2KCgB3OC,EAbG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,SAAkDC,OAGhE,4BACE,qCAAWL,GACX,wCAAcC,GACd,qCAAWC,GACX,wBAAII,UAAWC,IAAOC,OAAtB,UAAqCL,GACrC,wBAAIG,UAAWC,IAAOC,OAAtB,sBACsBJ,IAGtB,MCISK,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,SAApB,OAEtB,kBAAE,WAAF,KAEE,4BACEC,KAAK,SACLC,KAAMF,EACNL,UAAWC,IAAOO,OAClBC,QAASL,GAERC,KCLQK,EANC,SAAAC,GAAK,OACnB,iCACE,uBAAGX,UAAWC,IAAOW,OAAQD,EAAMC,OAClCD,EAAME,WCMIC,EATM,SAAAH,GAAK,OAEvBA,EAAMZ,OAIH,KAHF,6BACE,uBAAGC,UAAWC,IAAOW,MAAQ,IAAMX,IAAOc,KAAMJ,EAAMK,W,gBCcvCC,E,2MAMnBC,MAAQ,CACNxB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAKPuB,mBAAqB,SAACzB,EAAMC,EAASC,GACnC,OAAOF,EAAOC,EAAUC,G,EAG1BwB,iBAAmB,SAAAvB,GAAK,OAAIA,EAAQ,G,EAEpCwB,gCAAkC,SAAC3B,EAAMG,GACvC,OAAOyB,KAAKC,MAAO7B,EAAOG,EAAS,KAAO,K,EAG5CO,gBAAkB,SAAAoB,GAChB,IAAMjB,EAAOiB,EAAEC,OAAOlB,KAEtB,EAAKmB,UAAS,SAACC,EAAWhB,GAAZ,sBACXJ,EAAOoB,EAAUpB,GAAQI,EAAMiB,U,wEAK1B,IAAD,SACwBC,KAAKX,MAA5BxB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQgC,KAAKV,mBAAmBW,KAAKD,KAA7BA,CAAmCnC,EAAMC,EAASC,GAC1DE,EAAqB+B,KAAKR,gCAAgCS,KAAKD,KAA1CA,CAAgDnC,EAAMG,GAC3EkC,EAAkBF,KAAKT,iBAAiBU,KAAKD,KAA3BA,CAAiChC,GAEzD,OAEE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAASe,MAAM,8BACZoB,OAAOC,KAAKJ,KAAKX,OAAOgB,KAAI,SAAAC,GAAI,OAC/B,kBAAC,EAAD,CAAiB/B,gBAAiB,EAAKA,gBAAiBC,SAAU8B,EAAMC,IAAKC,IAAQC,iBAIzF,kBAAC,EAAD,CAAS1B,MAAM,cACb,kBAAC2B,EAAD,CACE7C,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,EACpBC,OAAQgC,KAGZ,kBAAC,EAAD,CAAcf,QAAQ,oBAAoBjB,OAAQgC,S,GA1DpBS,aAAjBvB,EACZwB,aAAe,CACpBb,KAAM,GCrBV,IAMec,EANH,kBACV,kBAAC,WAAD,KACE,kBAAC,EAAD,QCAJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1b71fb07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Feedback_title__1lDW_\",\"msg\":\"Feedback_msg__22k2d\",\"buttonGood\":\"Feedback_buttonGood__1Y1QW\",\"buttonNeutral\":\"Feedback_buttonNeutral__1BRos\",\"buttonBad\":\"Feedback_buttonBad__3qRTJ\",\"button\":\"Feedback_button__39SWG\",\"boild\":\"Feedback_boild__3ShYq\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Feedback.module.css\";\r\n\r\nconst Statistic = ({ good, neutral, bad, total, positivePercentage, isOpen }) =>\r\n  isOpen ? (\r\n\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li> Bad: {bad}</li>\r\n      <li className={styles.boild}>Total: {total}</li>\r\n      <li className={styles.boild}>\r\n        Positive feedback: {positivePercentage}\r\n      </li>\r\n    </ul>\r\n  ) : null;\r\nexport default Statistic;\r\n\r\nStatistic.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n  isOpen: PropTypes.bool.isRequired\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Feedback.module.css\";\r\n\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback, btnValue }) => (\r\n\r\n  < Fragment >\r\n\r\n    <button\r\n      type=\"button\"\r\n      name={btnValue}\r\n      className={styles.button}\r\n      onClick={onLeaveFeedback}\r\n    >\r\n      {btnValue}\r\n    </button>\r\n\r\n  </Fragment >\r\n);\r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\n/* <button\r\ntype=\"button\"\r\nname=\"good\"\r\n data-name={Object.keys(stateParams)}\r\nclassName={styles.buttonGood + \" \" + styles.button}\r\nonClick={onLeaveFeedback}\r\n>\r\nGood\r\n</button>\r\n<button\r\ntype=\"button\"\r\nname=\"neutral\"\r\nclassName={styles.buttonNeutral + \" \" + styles.button}\r\nonClick={onLeaveFeedback}\r\n>\r\nNeutral\r\n</button>\r\n<button\r\ntype=\"button\"\r\nname=\"bad\"\r\nclassName={styles.buttonBad + \" \" + styles.button}\r\nonClick={onLeaveFeedback}\r\n>\r\nBad\r\n</button> */","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Feedback.module.css\";\r\n\r\nconst Section = props => (\r\n  <section>\r\n    <p className={styles.title}>{props.title}</p>\r\n    {props.children}\r\n  </section>\r\n);\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Feedback.module.css\";\r\n\r\nconst Notification = props =>\r\n\r\n  !props.isOpen ? (\r\n    <div>\r\n      <p className={styles.title + \" \" + styles.msg}>{props.message}</p>\r\n    </div>\r\n  ) : null;\r\n\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  isOpen: PropTypes.bool.isRequired\r\n};\r\n","import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Statistics from \"./Statistics.js\";\r\nimport FeedbackOptions from \"./FeedbackOptions.js\";\r\nimport Section from \"./Section.js\";\r\nimport Notification from \"./Notification.js\";\r\nimport shortid from 'shortid';\r\n\r\n/* const countTotalFeedback = (good, neutral, bad) => {\r\n  return good + neutral + bad;\r\n}; */\r\n\r\n/* function countTotalFeedback (good, neutral, bad) {\r\n  return good + neutral + bad;\r\n}; */\r\n/* const countPositiveFeedbackPercentage = (good, total) => {\r\n  return Math.round((good / total) * 100) + \"%\";\r\n}; */\r\n\r\n/* const isOpendDetermine = total => total > 0; */\r\n\r\n\r\nexport default class Feedback extends Component {\r\n  static defaultProps = {\r\n    step: 1\r\n\r\n  };\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n  };\r\n\r\n\r\n\r\n  countTotalFeedback = (good, neutral, bad) => {\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  isOpendDetermine = total => total > 0;\r\n\r\n  countPositiveFeedbackPercentage = (good, total) => {\r\n    return Math.round((good / total) * 100) + \"%\";\r\n  };\r\n\r\n  onLeaveFeedback = e => {\r\n    const name = e.target.name;\r\n\r\n    this.setState((prevState, props) => ({\r\n      [name]: prevState[name] + props.step\r\n    }));\r\n  };\r\n\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = this.countTotalFeedback.bind(this)(good, neutral, bad);\r\n    const positivePercentage = this.countPositiveFeedbackPercentage.bind(this)(good, total);\r\n    const validatorIsOpen = this.isOpendDetermine.bind(this)(total);\r\n\r\n    return (\r\n\r\n      <Fragment>\r\n        <Section title=\"Please Leave your feedback\">\r\n          {Object.keys(this.state).map(item => (\r\n            <FeedbackOptions onLeaveFeedback={this.onLeaveFeedback} btnValue={item} key={shortid.generate()} />\r\n          ))}\r\n        </Section>\r\n\r\n        <Section title=\"Statistics\">\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={total}\r\n            positivePercentage={positivePercentage}\r\n            isOpen={validatorIsOpen}\r\n          />\r\n        </Section>\r\n        <Notification message=\"No feedback given\" isOpen={validatorIsOpen} />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nFeedback.propTypes = {\r\n  step: PropTypes.number.isRequired\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport Feedback from \"./Feedback/Feedback.js\";\r\n\r\nconst App = () => (\r\n  <Fragment>\r\n    <Feedback />\r\n  </Fragment>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}