{"version":3,"sources":["components/Feedback/Feedback.module.css","components/Feedback/Statistics.js","components/Feedback/FeedbackOptions.js","components/Feedback/Section.js","components/Feedback/Notification.js","components/Feedback/Feedback.js","components/App.js","index.js"],"names":["module","exports","Statistic","good","neutral","bad","total","positivePercentage","isOpen","className","styles","boild","FeedbackOptions","onLeaveFeedback","type","name","buttonGood","button","onClick","buttonNeutral","buttonBad","Section","props","title","children","Notification","msg","message","Feedback","state","e","target","setState","prevState","step","this","countTotalFeedback","Math","round","countPositiveFeedbackPercentage","validatorIsOpen","isOpendDetermine","Statistics","Component","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,IAAM,sBAAsB,WAAa,6BAA6B,cAAgB,gCAAgC,UAAY,4BAA4B,OAAS,yBAAyB,MAAQ,0B,yKCiB3OC,EAdG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,SAAkDC,OAEhE,kBAAC,WAAD,KACE,4BACE,qCAAWL,GACX,wCAAcC,GACd,qCAAWC,GACX,wBAAII,UAAWC,IAAOC,OAAtB,UAAqCL,GACrC,wBAAIG,UAAWC,IAAOC,OAAtB,sBACsBJ,KAIxB,MCeSK,EA5BS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,kBAAC,WAAD,KACE,4BACEC,KAAK,SACLC,KAAK,OACLN,UAAWC,IAAOM,WAAa,IAAMN,IAAOO,OAC5CC,QAASL,GAJX,QAQA,4BACEC,KAAK,SACLC,KAAK,UACLN,UAAWC,IAAOS,cAAgB,IAAMT,IAAOO,OAC/CC,QAASL,GAJX,WAQA,4BACEC,KAAK,SACLC,KAAK,MACLN,UAAWC,IAAOU,UAAY,IAAMV,IAAOO,OAC3CC,QAASL,GAJX,SCZWQ,EANC,SAAAC,GAAK,OACnB,iCACE,uBAAGb,UAAWC,IAAOa,OAAQD,EAAMC,OAClC,6BAAMD,EAAME,YCIFC,EAPM,SAAAH,GAAK,OACxBA,EAAMd,OAAS,KACb,6BACE,uBAAGC,UAAWC,IAAOa,MAAQ,IAAMb,IAAOgB,KAAMJ,EAAMK,WCYvCC,E,2MAKnBC,MAAQ,CACN1B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPQ,gBAAkB,SAAAiB,GAChB,IAAMf,EAAOe,EAAEC,OAAOhB,KAEtB,EAAKiB,UAAS,SAACC,EAAWX,GAAZ,sBACXP,EAAOkB,EAAUlB,GAAQO,EAAMY,U,wEAI1B,IAAD,EACwBC,KAAKN,MAA5B1B,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAjCiB,SAACH,EAAMC,EAASC,GACzC,OAAOF,EAAOC,EAAUC,EAgCR+B,CAAmBjC,EAAMC,EAASC,GAC1CE,EA9B8B,SAACJ,EAAMG,GAC7C,OAAO+B,KAAKC,MAAOnC,EAAOG,EAAS,KAAO,IA6BbiC,CAAgCpC,EAAMG,GAC3DkC,EA3Be,SAAAlC,GACvB,OAAOA,EAAQ,EA0BWmC,CAAiBnC,GAEzC,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAASiB,MAAM,8BACb,kBAAC,EAAD,CAAiBV,gBAAiBsB,KAAKtB,mBAGzC,kBAAC,EAAD,CAASU,MAAM,cACb,kBAACmB,EAAD,CACEvC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,EACpBC,OAAQgC,KAGZ,kBAAC,EAAD,CAAcb,QAAQ,oBAAoBnB,OAAQgC,S,GAzCpBG,aAAjBf,EACZgB,aAAe,CACpBV,KAAM,GClBV,IAMeW,EANH,kBACV,kBAAC,WAAD,KACE,kBAAC,EAAD,QCAJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7c70ffb6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Feedback_title__1lDW_\",\"msg\":\"Feedback_msg__22k2d\",\"buttonGood\":\"Feedback_buttonGood__1Y1QW\",\"buttonNeutral\":\"Feedback_buttonNeutral__1BRos\",\"buttonBad\":\"Feedback_buttonBad__3qRTJ\",\"button\":\"Feedback_button__39SWG\",\"boild\":\"Feedback_boild__3ShYq\"};","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Feedback.module.css\";\r\n\r\nconst Statistic = ({ good, neutral, bad, total, positivePercentage, isOpen }) =>\r\n  isOpen ? (\r\n    <Fragment>\r\n      <ul>\r\n        <li>Good: {good}</li>\r\n        <li>Neutral: {neutral}</li>\r\n        <li> Bad: {bad}</li>\r\n        <li className={styles.boild}>Total: {total}</li>\r\n        <li className={styles.boild}>\r\n          Positive feedback: {positivePercentage}\r\n        </li>\r\n      </ul>\r\n    </Fragment>\r\n  ) : null;\r\nexport default Statistic;\r\n\r\nStatistic.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n  isOpen: PropTypes.bool.isRequired\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Feedback.module.css\";\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => (\r\n  <Fragment>\r\n    <button\r\n      type=\"button\"\r\n      name=\"good\"\r\n      className={styles.buttonGood + \" \" + styles.button}\r\n      onClick={onLeaveFeedback}\r\n    >\r\n      Good\r\n    </button>\r\n    <button\r\n      type=\"button\"\r\n      name=\"neutral\"\r\n      className={styles.buttonNeutral + \" \" + styles.button}\r\n      onClick={onLeaveFeedback}\r\n    >\r\n      Neutral\r\n    </button>\r\n    <button\r\n      type=\"button\"\r\n      name=\"bad\"\r\n      className={styles.buttonBad + \" \" + styles.button}\r\n      onClick={onLeaveFeedback}\r\n    >\r\n      Bad\r\n    </button>\r\n  </Fragment>\r\n);\r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Feedback.module.css\";\r\n\r\nconst Section = props => (\r\n  <section>\r\n    <p className={styles.title}>{props.title}</p>\r\n    {<div>{props.children}</div>}\r\n  </section>\r\n);\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Feedback.module.css\";\r\n\r\nconst Notification = props =>\r\n  props.isOpen ? null : (\r\n    <div>\r\n      <p className={styles.title + \" \" + styles.msg}>{props.message}</p>\r\n    </div>\r\n  );\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  isOpen: PropTypes.bool.isRequired\r\n};\r\n","import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Statistics from \"./Statistics.js\";\r\nimport FeedbackOptions from \"./FeedbackOptions.js\";\r\nimport Section from \"./Section.js\";\r\nimport Notification from \"./Notification.js\";\r\n\r\nconst countTotalFeedback = (good, neutral, bad) => {\r\n  return good + neutral + bad;\r\n};\r\n\r\nconst countPositiveFeedbackPercentage = (good, total) => {\r\n  return Math.round((good / total) * 100) + \"%\";\r\n};\r\n\r\nconst isOpendDetermine = total => {\r\n  return total > 0 ? true : false;\r\n};\r\n\r\nexport default class Feedback extends Component {\r\n  static defaultProps = {\r\n    step: 1\r\n  };\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n  };\r\n\r\n  onLeaveFeedback = e => {\r\n    const name = e.target.name;\r\n\r\n    this.setState((prevState, props) => ({\r\n      [name]: prevState[name] + props.step\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = countTotalFeedback(good, neutral, bad);\r\n    const positivePercentage = countPositiveFeedbackPercentage(good, total);\r\n    const validatorIsOpen = isOpendDetermine(total);\r\n\r\n    return (\r\n      <Fragment>\r\n        <Section title=\"Please Leave your feedback\">\r\n          <FeedbackOptions onLeaveFeedback={this.onLeaveFeedback} />\r\n        </Section>\r\n\r\n        <Section title=\"Statistics\">\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={total}\r\n            positivePercentage={positivePercentage}\r\n            isOpen={validatorIsOpen}\r\n          />\r\n        </Section>\r\n        <Notification message=\"No feedback given\" isOpen={validatorIsOpen} />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nFeedback.propTypes = {\r\n  step: PropTypes.number.isRequired\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport Feedback from \"./Feedback/Feedback.js\";\r\n\r\nconst App = () => (\r\n  <Fragment>\r\n    <Feedback />\r\n  </Fragment>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}